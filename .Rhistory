label = NULL,
choices = tapered_tari_temp_columns,
multiple = TRUE,
selectize = TRUE,
selected = NULL
)
)
),
column(3,
box(title = "Pressure Parameters",
solidHeader = TRUE, status = "primary", collapsible = TRUE, width = 12,
selectInput("taperedtaripresscolumns",
label = NULL,
choices = tapered_tari_press_columns,
multiple = TRUE,
selectize = TRUE,
selected = NULL
)
)
),
column(3,
box(title = "Speed Parameters",
solidHeader = TRUE, status = "primary", collapsible = TRUE, width = 12,
selectInput("taperedtarispeedcolumns",
label = NULL,
choices = tapered_tari_speed_columns,
multiple = TRUE,
selectize = TRUE,
selected = NULL
)
)
),
column(3,
box(title = "Exra Parameters",
solidHeader = TRUE, status = "primary", collapsible = TRUE, width = 12,
selectInput("taperedtariextracolumns",
label = NULL,
choices = tapered_tari_extra_columns,
multiple = TRUE,
selectize = TRUE,
selected = c("Material Number", "SAP Batch Number",
"Start Date", "Start Qty", "Start Qty Unit",
"Yield Qty", "Scrap Qty",
"Contribution to Plant Level Yield VOP",
"Contribution to Plant Level Scrap VOP",
"Contribution to Plant Level Total VOP",
"Yield Percentage", "Scrap Percentage")
)
)
)
),
fluidRow(
column(12,
box(title = "MES Parameters and Yield Data",
solidHeader = TRUE, status = "success", collapsible = TRUE, width = 12,
DT::dataTableOutput("taperedMESparametersandyield")
)
)
)
), #end tabItem
tabItem(tabName = "taperedmesparameterstab",
fluidRow(
column(12,
box(title = "MES Parameters Data",
solidHeader = TRUE, status = "success", collapsible = TRUE, width = 12,
DT::dataTableOutput("taperedMESparameters")
)
)
)
), #end tabItem
tabItem(tabName = "taperedmestimetab",
fluidRow(
column(12,
box(title = "MES Timestamp Data",
solidHeader = TRUE, status = "success", collapsible = TRUE, width = 12,
DT::dataTableOutput("taperedMEStime")
)
)
)
), #end tabItem
tabItem(tabName = "taperedmessubmitterstab",
fluidRow(
column(12,
box(title = "MES Submitter Data",
solidHeader = TRUE, status = "success", collapsible = TRUE, width = 12,
DT::dataTableOutput("taperedMESsubmitter")
)
)
)
), #end tabItem
tabItem(tabName = "taperedmestotaltab",
fluidRow(
column(12,
box(title = "MES Total Data",
solidHeader = TRUE, status = "success", collapsible = TRUE, width = 12,
DT::dataTableOutput("taperedMEStotal")
)
)
)
), #end tabItem
tabItem(tabName = "singlescrapcodestab",
fluidRow(
column(12,
box(title = "Scrapcode Data",
solidHeader = TRUE, status = "success", collapsible = TRUE, width = 12,
DT::dataTableOutput("singlescrapcodes")
)
)
)
), #end tabItem
tabItem(tabName = "mutliscrapcodestab",
fluidRow(
column(12,
box(title = "Scrapcode Data",
solidHeader = TRUE, status = "success", collapsible = TRUE, width = 12,
DT::dataTableOutput("multiscrapcodes")
)
)
)
), #end tabItem
tabItem(tabName = "taperedscrapcodestab",
fluidRow(
column(12,
box(title = "MES Data",
solidHeader = TRUE, status = "success", collapsible = TRUE, width = 12,
DT::dataTableOutput("taperedscrapcodes")
)
)
)
), #end tabItem
tabItem(tabName = "resininfotab",
fluidRow(
column(12,
box(title = "Resin Data",
solidHeader = TRUE, status = "success", collapsible = TRUE, width = 12,
DT::dataTableOutput("resin_data_ui")
)
)
)
), #end tabItem
tabItem(tabName = "screwinfotab",
fluidRow(
column(12,
box(title = "Screw Data",
solidHeader = TRUE, status = "success", collapsible = TRUE, width = 12,
DT::dataTableOutput("screw_data_ui")
)
)
)
), #end tabItem
tabItem(tabName = "singleshoppingcarttab",
fluidRow(
box(title = "Data Table",
width = 12,
DT::dataTableOutput("singleshoppingcartpps"),
fluidRow(
downloadButton('singlecartdownloadpps',
'Download Single Shopping Cart PPS Data')
)
)
) #end fluidRow
), #end tabItem
tabItem(tabName = "multishoppingcarttab",
fluidRow(
column(12,
DT::dataTableOutput("multishoppingcartpps"),
fluidRow(
downloadButton('multicartdownloadpps',
'Download Multi-Layer Shopping Cart PPS Data')
)
)
)
), #end tabItem
tabItem(tabName = "taperedshoppingcarttab",
fluidRow(
column(12,
DT::dataTableOutput("taperedshoppingcartpps"),
fluidRow(
downloadButton('taperedcartdownloadpps',
'Download Tapered Shopping Cart PPS Data')
)
)
)
), #end tabItem
tabItem(tabName = "totalshoppingcarttab",
fluidRow(
column(12,
DT::dataTableOutput("totalshoppingcartpps"),
fluidRow(
downloadButton('totalcartdownloadpps',
'Download Total Shopping Cart PPS Data')
)
)
)
), #end tabItem
tabItem(tabName="MESDataAnalysis",
# Some custom CSS
tags$head(
tags$style(HTML("
/* Smaller font for preformatted text */
pre, table.table {
font-size: smaller;
}
body {
min-height: 2000px;
}
.option-group {
border: 1px solid #ccc;
border-radius: 6px;
padding: 0px 5px;
margin: 5px -10px;
background-color: #c1c1c1;
}
.option-header {
color: #000000;
text-transform: uppercase;
margin-bottom: 5px;
}
.option-label{
color: #000000;
margin-bottom: 1px;
padding: 0px 5px;
}
.inputbox{
background-color: #000000;
}
"))),
fluidRow(
column(width = 3,
box(title = "Explorer",
solidHeader = TRUE, status = "info", collapsible = TRUE, width = 12,
div(class = "option-group",
radioButtons("Data_set", "Data Set",
c("Single", "Multi","Tapered","Upload"), inline = TRUE),
conditionalPanel(
"input.Data_set ==='Upload'",
div(style="display: inline-block;vertical-align:top;width: 250px;",
fileInput("uploadfile", "Choose csv File",
multiple = TRUE,
accept = c("text/csv",
"text/comma-separated-values,text/plain",
".csv"))),
div(style="display: inline-block;vertical-align:top;width: 50px;",
checkboxInput("header", "Header", TRUE)),
checkboxInput("Preview","Preview",F),
#preview the uploaded dataset
conditionalPanel(
condition="input.Preview",
DT::dataTableOutput("UploadDataPreview")
)
)#end conditional panel for the upload file
),# end Data Set section
div(class="option-group",
div(class="option-header","Plot"),
textInput("plottitle","Plot Title",placeholder = NULL),
div(style="display: inline-block;vertical-align:top;width: 150px;",
uiOutput("Xvar_ui")),
div(style="display: inline-block;vertical-align:top;width: 150px;",
uiOutput("Yvar_ui")),
conditionalPanel(
condition = "input.Data_set !='Upload'",
checkboxGroupInput("PlotType","Plot Type",
choiceNames =
list("Scatter","Line"),
choiceValues =
list("Scatter","Line"),
selected = "Scatter",inline = T
),
uiOutput("Groupby_ui")
) # End conditionalpanel for Mtcars
),#end Plot section
div(class="option-group",
div(class="option-header","Filters"),
dateRangeInput("daterange6", "Date range:",
startview = "decade")
# dropdownButton(
#     label = "Filter",status = "default", width = 80,
#     #actionButton(inputId = "de", label = "Sort A to Z", icon = icon("sort-alpha-asc")),# filter  (filter icon)
#     #actionButton(inputId = "as", label = "Sort Z to A", icon = icon("sort-alpha-desc")),
#
#     tags$div(
#       class = "container",
#       uiOutput("filter_ui")   # to have reactive dropdown list
#     ),
#     actionButton(inputId = "filter_select", label = "(un)select all")  #an action button to select or unselect all
#   ) #end Filter
),#End Filter section
div(class = "option-group",
div(class = "option-header", "Download"),
radioButtons('GraphFormat', 'Graph format', c('PDF', 'png'),
inline = TRUE),
downloadButton("GraphDownload_DataAnalysis","Download Graph")
)#end download secion
)
), #end plot managing section
column(width = 9, class = "well",
box(title = "Plot", solidHeader = TRUE, status = "primary", collapsible = TRUE, width = 12,
column(width = 6,
uiOutput("plotui")
),
column(width = 6,
plotOutput("MES_plot2")
)),#end plot section
fluidRow(
h4("Points selected by brushing"),
DT::dataTableOutput("plot_brushed_points")
), #end brushed points section
fluidRow(
downloadButton("SelectedDataDownload_DataAnalysis","Download Selected Data")
)# end download dataset section
)
)
)#end Analysis Tool
),#end tabItems
#create a pop up window for the shopping cart
absolutePanel(
actionButton("ShoppingCart","",icon=icon("shopping-cart","fa-2x"),width = 80 ),
#verbatimTextOutput("ShoppingCart_Count"),     # Try to add the number of part-number in shopping cart behind the cart icon
bsModal("modalExample", "Shopping Cart", "ShoppingCart", size = "default",
tabsetPanel(
tabPanel("Single-Extrusion Cart",
textInput("SinglePartNum_input","Part Number"),
actionButton("singleMadd_button","Add"),
dataTableOutput("singleshoppingcartparts"),
dataTableOutput("singleshoppingcart")
),
tabPanel("Multi-Layer Extrusion Cart",
textInput("MultiPartNum_input","Part Number"),
actionButton("multiMadd_button","Add"),
dataTableOutput("multishoppingcartparts"),
dataTableOutput("multishoppingcart")
#Multi-layer Extrusion Parts
),
tabPanel("Tapered Extrusion Cart",
textInput("TaperedPartNum_input","Part Number"),
actionButton("taperedMadd_button","Add"),
dataTableOutput("taperedshoppingcartparts"),
dataTableOutput("taperedshoppingcart")
#Tapered Extrusion Parts
),
tabPanel("Total Extrusion Cart",
#Total Extrusion Parts
dataTableOutput("totalshoppingcartparts"),
dataTableOutput("totalshoppingcart")
)
)
),
draggable = F,right = 10,top = 3, fixed = F,
style = "z-index: 999999"
) #end absolutePanel
)#end dashboardbody
) #end UI
runApp('App_Server_Q3.R')
#load the master files
#write master files to a backup location with a date stamp
#analyze the auto download files
#concatenate to the master files
#write the master files to the UI location
#delete files after eight weeks. Keep one file from that period.
#close out the script
#### Loading the Current Master Files ####
ui_folder <- "//Mgrovef1/shared/Operations/EXTRUSIO/Felipe Correa Netto/Extrusion Application/Data/UI Data"
single_parametersandyields <- read.csv(paste0(ui_folder, "/", "Single Tari Parameters and Yield.csv"),
header = TRUE, check.names = FALSE, stringsAsFactors = FALSE)
#load the master files
#write master files to a backup location with a date stamp
#analyze the auto download files
#concatenate to the master files
#write the master files to the UI location
#delete files after eight weeks. Keep one file from that period.
#close out the script
#### Loading the Current Master Files ####
ui_folder <- "//Mgrovef1/shared/Operations/EXTRUSIO/Felipe Correa Netto/Extrusion Application/Data/UI Data"
single_parametersandyields <- read.csv(paste0(ui_folder, "/", "Single Tari Parameters and Yield.csv"),
header = TRUE, check.names = FALSE, stringsAsFactors = FALSE)
multi_parametersandyields <- read.csv(paste0(ui_folder, "/", "Multi Tari Parameters and Yield.csv"),
header = TRUE, check.names = FALSE, stringsAsFactors = FALSE)
tapered_parametersandyields <- read.csv(paste0(ui_folder, "/", "Tapered Tari Parameters and Yield.csv"),
header = TRUE, check.names = FALSE, stringsAsFactors = FALSE)
single_parameters <- read.csv(paste0(ui_folder, "/", "Single Tari Parameters.csv"),
header = TRUE, check.names = FALSE, stringsAsFactors = FALSE)
multi_parameters <- read.csv(paste0(ui_folder, "/", "Multi Tari Parameters.csv"),
header = TRUE, check.names = FALSE, stringsAsFactors = FALSE)
tapered_parameters <- read.csv(paste0(ui_folder, "/", "Tapered Tari Parameters.csv"),
header = TRUE, check.names = FALSE, stringsAsFactors = FALSE)
single_submitter <- read.csv(paste0(ui_folder, "/", "Single Tari Submitter.csv"),
header = TRUE, check.names = FALSE, stringsAsFactors = FALSE)
multi_submitter <- read.csv(paste0(ui_folder, "/", "Multi Tari Submitter.csv"),
header = TRUE, check.names = FALSE, stringsAsFactors = FALSE)
tapered_submitter <- read.csv(paste0(ui_folder, "/", "Tapered Tari Submitter.csv"),
header = TRUE, check.names = FALSE, stringsAsFactors = FALSE)
single_time <- read.csv(paste0(ui_folder, "/", "Single Tari Time.csv"),
header = TRUE, check.names = FALSE, stringsAsFactors = FALSE)
multi_time <- read.csv(paste0(ui_folder, "/", "Multi Tari Time.csv"),
header = TRUE, check.names = FALSE, stringsAsFactors = FALSE)
tapered_time <- read.csv(paste0(ui_folder, "/", "Tapered Tari Time.csv"),
header = TRUE, check.names = FALSE, stringsAsFactors = FALSE)
single_total <- read.csv(paste0(ui_folder, "/", "Single Tari Total.csv"),
header = TRUE, check.names = FALSE, stringsAsFactors = FALSE)
multi_total <- read.csv(paste0(ui_folder, "/", "Multi Tari Total.csv"),
header = TRUE, check.names = FALSE, stringsAsFactors = FALSE)
tapered_total <- read.csv(paste0(ui_folder, "/", "Tapered Tari Total.csv"),
header = TRUE, check.names = FALSE, stringsAsFactors = FALSE)
#### Re-writting the Master Files to a Backup ####
backup_folder <- "//Mgrovef1/shared/Operations/EXTRUSIO/Felipe Correa Netto/Test/Backup UI Data"
current_date <- Sys.Date() #gets current date
backup_single_parametersandyield_name <- paste0("Backup Single Tari Parameters And Yield ", current_date, ".csv")
backup_multi_parametersandyield_name <- paste0("Backup Multi Tari Parameters And Yield ", current_date, ".csv")
backup_tapered_parametersandyield_name <- paste0("Backup Tapered Tari Parameters And Yield ", current_date, ".csv")
backup_single_parameters_name <- paste0("Backup Single Tari Parameters ", current_date, ".csv")
backup_multi_parameters_name <- paste0("Backup Multi Tari Parameters ", current_date, ".csv")
backup_tapered_parameters_name <- paste0("Backup Tapered Tari Parameters ", current_date, ".csv")
backup_single_submitter_name <- paste0("Backup Single Tari Submitter ", current_date, ".csv")
backup_multi_submitter_name <- paste0("Backup Multi Tari Submitter ", current_date, ".csv")
backup_tapered_submitter_name <- paste0("Backup Tapered Tari Submitter ", current_date, ".csv")
backup_single_time_name <- paste0("Backup Single Tari Time ", current_date, ".csv")
backup_multi_time_name <- paste0("Backup Multi Tari Time ", current_date, ".csv")
backup_tapered_time_name <- paste0("Backup Tapered Tari Time ", current_date, ".csv")
backup_single_total_name <- paste0("Backup Single Tari Total ", current_date, ".csv")
backup_multi_total_name <- paste0("Backup Multi Tari Total ", current_date, ".csv")
backup_tapered_total_name <- paste0("Backup Tapered Tari Total ", current_date, ".csv")
#writing the files
fwrite(single_parametersandyield, paste0(backup_folder, "/", backup_single_parametersandyield_name))
fwrite(multi_parametersandyield, paste0(backup_folder, "/", backup_multi_parametersandyield_name))
fwrite(tapered_parametersandyield, paste0(backup_folder, "/", backup_tapered_parametersandyield_name))
fwrite(single_parameters, paste0(backup_folder, "/", backup_single_parameters_name))
fwrite(multi_parameters, paste0(backup_folder, "/", backup_multi_parameters_name))
fwrite(tapered_parameters, paste0(backup_folder, "/", backup_tapered_parameters_name))
fwrite(single_submitter, paste0(backup_folder, "/", backup_single_submitter_name))
fwrite(multi_submitter, paste0(backup_folder, "/", backup_multi_submitter_name))
fwrite(tapered_submitter, paste0(backup_folder, "/", backup_tapered_submitter_name))
fwrite(single_time, paste0(backup_folder, "/", backup_single_time_name))
fwrite(multi_time, paste0(backup_folder, "/", backup_multi_time_name))
fwrite(tapered_time, paste0(backup_folder, "/", backup_tapered_time_name))
fwrite(single_total, paste0(backup_folder, "/", backup_single_total_name))
fwrite(multi_total, paste0(backup_folder, "/", backup_multi_total_name))
fwrite(tapered_total, paste0(backup_folder, "/", backup_tapered_total_name))
#### Analyzing the Auto Download Files ####
auto_download_data <- read.csv("//Mgrovef1/shared/Operations/EXTRUSIO/Felipe Correa Netto/Extrusion Application/Data/AutoDownload/MES/CTP - Data Points - Previous Day.csv",
header = TRUE, check.names = FALSE, stringsAsFactors = FALSE)
colnames(auto_download_data) <- c("Container", "Container Status", "Material", "Material Desc",
"Material Rev", "Model", "SAP Batch", "Current Qty", "Production Order",
"Production Order Type", "SWR", "Data Point  Value", "High Limit",
"Low Limit", "Result", "Parent Container", "Final Confirmed Quantity",
"Data Point Desc", "Sequence", "Duration Delta", "Data Point Name",
"Original Qty", "Task List", "Task List Description",
"Task List Rev", "Task Item", "Work Cell", "Serial #",
"Product Family", "Submitter", "Data Collection Date & Time")
auto_download_data <- auto_download_data[1:which(grepl("CON_CONTAINER", auto_download_data[,1]))[1],]
single_pps_data <- read.csv("//Mgrovef1/shared/Operations/EXTRUSIO/Felipe Correa Netto/Extrusion Application/Data/UI Data/Single PPS Data_UI_30 August 2017.csv",
header = TRUE, check.names = FALSE, stringsAsFactors = FALSE)
multi_pps_data <- read.csv("//Mgrovef1/shared/Operations/EXTRUSIO/Felipe Correa Netto/Extrusion Application/Data/UI Data/Multi-Layered PPS Data_UI_30 August 2017.csv",
header = TRUE, check.names = FALSE, stringsAsFactors = FALSE)
tapered_pps_data <- read.csv("//Mgrovef1/shared/Operations/EXTRUSIO/Felipe Correa Netto/Extrusion Application/Data/UI Data/Tapered PPS Data_UI_30 August 2017.csv",
header = TRUE, check.names = FALSE, stringsAsFactors = FALSE)
single_part_numbers <- unique(single_pps_data$`Part Number`)
multi_part_numbers <- unique(multi_pps_data$`Part Number`)
tapered_part_numbers <- unique(tapered_pps_data$`Part Number`)
single_aggregate_mes_data <- auto_download_data[which(auto_download_data$Material %in% single_part_numbers),]
multi_aggregate_mes_data <- auto_download_data[which(auto_download_data$Material %in% multi_part_numbers),]
tapered_aggregate_mes_data <- auto_download_data[which(auto_download_data$Material %in% tapered_part_numbers),]
source("C:/Users/correaf/Documents/GitHub/ExtrusionApp/MESTariAnalyer.R")
single_mes_list <- generateTariList(single_aggregate_mes_data)
multi_mes_list <- generateTariList(multi_aggregate_mes_data)
tapered_mes_list <- generateTariList(tapered_aggregate_mes_data)
#### Rbiding to the Master Data Frames ####
single_parameters <- rbind(single_parametersandyield, single_mes_list$parameters)
multi_parameters_new <- rbind(multi_parametersandyield, multi_mes_list$parameters)
tapered_parameters_new <- rbind(tapered_parametersandyield, tapered_mes_list$parameters)
single_submitter_new <- rbind(single_submitter, single_mes_list$submitter)
multi_submitter_new <- rbind(multi_submitter, multi_mes_list$submitter)
tapered_submitter_new <- rbind(tapered_submitter, tapered_mes_list$submitter)
single_time_new <- rbind(single_time, single_mes_list$time)
multi_time_new <- rbind(multi_time, multi_mes_list$time)
tapered_time_new <- rbind(tapered_time, tapered_mes_list$time)
single_total_new <- rbind(single_total, single_mes_list$total)
multi_total_new <- rbind(multi_total, multi_mes_list$total)
tapered_total_new <- rbind(tapered_total, tapered_mes_list$total)
install.packages(‘data.table’)
install.packages(‘knitr’)
install.packages(‘miniUI’)
install.packages(‘shiny’)
install.packages(“taskscheduleR”, repos = “http://www.datatailor.be/rcube”, type = “source”)
install.packages(‘data.table’)
install.packages(‘knitr’)
install.packages(‘miniUI’)
install.packages(‘shiny’)
install.packages(“taskscheduleR”, repos = “http://www.datatailor.be/rcube”, type = “source”)
install.packages(‘data.table’)
install.packages("data.table")
install.packages("knitr")
install.packages("miniUI")
install.packages("shiny")
install.packages(“taskscheduleR”, repos = “http://www.datatailor.be/rcube”, type = “source”)
fwrite(single_parameters, "Single Tari Parameters and Yield.csv")
install.packages(“taskscheduleR”, repos = “http://www.datatailor.be/rcube”, type = “source”)
install.packages("taskscheduleR", repos = "http://www.datatailor.be/rcube", type = "source")
taskscheduleR:::taskschedulerAddin()
library(shiny); runApp('C:/Users/correaf/Desktop/PD Ext Insights/PDExtRunMe.R')
runApp('C:/Users/correaf/Desktop/PD Ext Insights/PDExtRunMe.R')
runApp('C:/Users/correaf/Desktop/PD Ext Insights/PDExtRunMe.R')
df[df$'Manager' %in% c("Laura", "Brett"),]
runApp('C:/Users/correaf/Desktop/PD Ext Insights/PDExtRunMe.R')
runApp('C:/Users/correaf/Desktop/PD Ext Insights/PDExtRunMe.R')
runApp('C:/Users/correaf/Desktop/PD Ext Insights/PDExtRunMe.R')
runApp('C:/Users/correaf/Desktop/PD Ext Insights/PDExtRunMe.R')
runApp('C:/Users/correaf/Desktop/PD Ext Insights/PDExtRunMe.R')
runApp('C:/Users/correaf/Desktop/PD Ext Insights/PDExtRunMe.R')
df <- read.csv("C:/Users/correaf/Desktop/Correct CTP Financials/Analysis/Final Data v3.0.csv", header = TRUE, stringsAsFactors = FALSE, check.names = FALSE)
lines <- unique(df$Line)
lines
molding_lines <- c("GUIDEZILLA 1-MLD", "GUIDEZILLA 2-MLD", "HYPO ASSY/BOY MOLD-MLD", "HYPO BOY MLD 2-MLD", "ARBURG-MLD", "BOY 3-MLD")
