column(6,
conditionalPanel(
condition = "input.PCTBZT1_d",
uiOutput("PCTBZT1_max_input")
)
))),
#Barrel ZOne2
column(3,
fluidRow(uiOutput("PCTBZT2_s")),
fluidRow(
column(6,
conditionalPanel(
condition = "input.PCTBZT2_d",
uiOutput("PCTBZT2_min_input")
)
),
column(6,
conditionalPanel(
condition = "input.PCTBZT2_d",
uiOutput("PCTBZT2_max_input")
)
))),
#Barrel Zone3
column(3,
fluidRow(uiOutput("PCTBZT3_s")),
fluidRow(
column(6,
conditionalPanel(
condition = "input.PCTBZT3_d",
uiOutput("PCTBZT3_min_input")
)
),
column(6,
conditionalPanel(
condition = "input.PCTBZT3_d",
uiOutput("PCTBZT3_max_input")
)
)))
),#end Processing Attribute 1
fluidRow(
column(3,
fluidRow(uiOutput("PCTCT_s")),
fluidRow(
column(6,
conditionalPanel(
condition = "input.PCTCT_d",
uiOutput("PCTCT_min_input")
)
),
column(6,
conditionalPanel(
condition = "input.PCTCT_d",
uiOutput("PCTCT_max_input")
)
))),
column(3,
fluidRow(uiOutput("PCTAT_s")),
fluidRow(
column(6,
conditionalPanel(
condition = "input.PCTAT_d",
uiOutput("PCTAT_min_input")
)
),
column(6,
conditionalPanel(
condition = "input.PCTAT_d",
uiOutput("PCTAT_max_input")
)
))),
column(3,
fluidRow(uiOutput("PCTDT1_s")),
fluidRow(
column(6,
conditionalPanel(
condition = "input.PCTDT1_d",
uiOutput("PCTDT1_min_input")
)
),
column(6,
conditionalPanel(
condition = "input.PCTDT1_d",
uiOutput("PCTDT1_max_input")
)
))),
column(3,
fluidRow(uiOutput("PCTDT2_s")),
fluidRow(
column(6,
conditionalPanel(
condition = "input.PCTDT2_d",
uiOutput("PCTDT2_min_input")
)
),
column(6,
conditionalPanel(
condition = "input.PCTDT2_d",
uiOutput("PCTDT2_max_input")
)
)))), #end Processing Attribute 2
#Dimentional Attribute
fluidRow(
tags$h1(strong("Dimentional Attribute"),style="font-size:25px;",align="left"),
column(2,
fluidRow(uiOutput("PCTPIDI_s")),
fluidRow(
column(6,
conditionalPanel(
condition = "input.PCTPIDI_d",
uiOutput("PCTPIDI_min_input")
)
),
column(6,
conditionalPanel(
condition = "input.PCTPIDI_d",
uiOutput("PCTPIDI_max_input")
)
))),
column(2,
fluidRow(uiOutput("PCTPODI_s")),
fluidRow(
column(6,
conditionalPanel(
condition = "input.PCTPODI_d",
uiOutput("PCTPODI_min_input")
)
),
column(6,
conditionalPanel(
condition = "input.PCTPODI_d",
uiOutput("PCTPODI_max_input")
)
))),
column(2,
fluidRow(uiOutput("PCTPWT_s")),
fluidRow(
column(6,
conditionalPanel(
condition = "input.PCTPWT_d",
uiOutput("PCTPWT_min_input")
)
),
column(6,
conditionalPanel(
condition = "input.PCTPWT_d",
uiOutput("PCTPWT_max_input")
)
))),
column(2,
fluidRow(uiOutput("PCTPOR_s")),
fluidRow(
column(6,
conditionalPanel(
condition = "input.PCTPOR_d",
uiOutput("PCTPOR_min_input")
)
),
column(6,
conditionalPanel(
condition = "input.PCTPOR_d",
uiOutput("PCTPOR_max_input")
)
))),
column(2,
fluidRow(uiOutput("PCTPCCT_s")),
fluidRow(
column(6,
conditionalPanel(
condition = "input.PCTPCCT_d",
uiOutput("PCTPCCT_min_input")
)
),
column(6,
conditionalPanel(
condition = "input.PCTPCCT_d",
uiOutput("PCTPCCT_max_input")
)
)))
), #end Dimentional Attribute 1
fluidRow(
column(2,
fluidRow(uiOutput("PCTDIDI_s")),
fluidRow(
column(6,
conditionalPanel(
condition = "input.PCTDIDI_d",
uiOutput("PCTDIDI_min_input")
)
),
column(6,
conditionalPanel(
condition = "input.PCTDIDI_d",
uiOutput("PCTDIDI_max_input")
)
))),
column(2,
fluidRow(uiOutput("PCTDODI_s")),
fluidRow(
column(6,
conditionalPanel(
condition = "input.PCTDODI_d",
uiOutput("PCTDODI_min_input")
)
),
column(6,
conditionalPanel(
condition = "input.PCTDODI_d",
uiOutput("PCTDODI_max_input")
)
))),
column(2,
fluidRow(uiOutput("PCTDWT_s")),
fluidRow(
column(6,
conditionalPanel(
condition = "input.PCTDWT_d",
uiOutput("PCTDWT_min_input")
)
),
column(6,
conditionalPanel(
condition = "input.PCTDWT_d",
uiOutput("PCTDWT_max_input")
)
))),
column(2,
fluidRow(uiOutput("PCTDOR_s")),
fluidRow(
column(6,
conditionalPanel(
condition = "input.PCTDOR_d",
uiOutput("PCTDOR_min_input")
)
),
column(6,
conditionalPanel(
condition = "input.PCTDOR_d",
uiOutput("PCTDOR_max_input")
)
))),
column(2,
fluidRow(uiOutput("PCTDCCT_s")),
fluidRow(
column(6,
conditionalPanel(
condition = "input.PCTDCCT_d",
uiOutput("PCTDCCT_min_input")
)
),
column(6,
conditionalPanel(
condition = "input.PCTDCCT_d",
uiOutput("PCTDCCT_max_input")
)
)))
), #end Dimentional Attribute 2
fluidRow(
column(2,
fluidRow(uiOutput("PCTPLength_s")),
fluidRow(
column(6,
conditionalPanel(
condition = "input.PCTPLength_d",
uiOutput("PCTPLength_min_input")
)
),
column(6,
conditionalPanel(
condition = "input.PCTPLength_d",
uiOutput("PCTPLength_max_input")
)
))),
column(2,
fluidRow(uiOutput("PCTTLength_s")),
fluidRow(
column(6,
conditionalPanel(
condition = "input.PCTTLength_d",
uiOutput("PCTTLength_min_input")
)
),
column(6,
conditionalPanel(
condition = "input.PCTTLength_d",
uiOutput("PCTTLength_max_input")
)
))),
column(2,
fluidRow(uiOutput("PCTDLength_s")),
fluidRow(
column(6,
conditionalPanel(
condition = "input.PCTDLength_d",
uiOutput("PCTDLength_min_input")
)
),
column(6,
conditionalPanel(
condition = "input.PCTDLength_d",
uiOutput("PCTDLength_max_input")
)
))),
column(2,
fluidRow(uiOutput("PCTToLength_s")),
fluidRow(
column(6,
conditionalPanel(
condition = "input.PCTToLength_d",
uiOutput("PCTToLength_min_input")
)
),
column(6,
conditionalPanel(
condition = "input.PCTToLength_d",
uiOutput("PCTToLength_max_input")
)
))),
column(2,
fluidRow(uiOutput("PCTPPD_s")),
fluidRow(
conditionalPanel(
condition = "input.PCTPPD_d",
uiOutput("PCTPPD_input")
)))
),#end of attribute 3
#Special Operation
fluidRow(
tags$h1(strong("Special Operation"),style="font-size:25px;",align="left"),
column(1,
fluidRow(uiOutput("PCTNEXIV_s")),
fluidRow(
conditionalPanel(
condition = "input.PCTNEXIV_d",
uiOutput("PCTNEXIV_input")
))),
column(1,
fluidRow(uiOutput("PCTAnnealed_s")),
fluidRow(
conditionalPanel(
condition = "input.PCTAnnealed_d",
uiOutput("PCTAnnealed_input")
))),
column(1,
fluidRow(uiOutput("PCTCaliper_s")),
fluidRow(
conditionalPanel(
condition = "input.PCTCaliper_d",
uiOutput("PCTCaliper_input")
))),
column(1,
fluidRow(uiOutput("PCTOS_s")),
fluidRow(
conditionalPanel(
condition = "input.PCTOS_d",
uiOutput("PCTOS_input")
))),
column(1,
fluidRow(uiOutput("PCTMP_s")),
fluidRow(
conditionalPanel(
condition = "input.PCTMP_d",
uiOutput("PCTMP_input")
))),
column(1,
fluidRow(uiOutput("PCTHT_s")),
fluidRow(
conditionalPanel(
condition = "input.PCTHT_d",
uiOutput("PCTHT_input")
))),
column(1,
fluidRow(uiOutput("PCTSPD_s")),
fluidRow(
conditionalPanel(
condition = "input.PCTSPD_d",
uiOutput("PCTSPD_input")
))),
column(1,
fluidRow(uiOutput("PCTSLD_s")),
fluidRow(
conditionalPanel(
condition = "input.PCTSLD_d",
uiOutput("PCTSLD_input")
))),
column(1,
fluidRow(uiOutput("PCTDLN_s")),
fluidRow(
conditionalPanel(
condition = "input.PCTDLN_d",
uiOutput("PCTDLN_input")
))),
column(1,
fluidRow(uiOutput("PCTULT_s")),
fluidRow(
conditionalPanel(
condition = "input.PCTULT_d",
uiOutput("PCTULT_input")
))),
column(1,
fluidRow(uiOutput("PCTVC_s")),
fluidRow(
conditionalPanel(
condition = "input.PCTVC_d",
uiOutput("PCTVC_input")
))),
column(1,
fluidRow(uiOutput("PCTIRD_s")),
fluidRow(
conditionalPanel(
condition = "input.PCTIRD_d",
uiOutput("PCTIRD_input")
)))
), #end Special Operation
fluidRow(
DT::dataTableOutput("mytable3")
)
)#end Tapered Extrusion PPS Data
),
#MES Data table rendering
navbarMenu("MES Data",
#Single Extrusion PPS Data
tabPanel("MES Parameters and Yield",
fluidRow(
DT::dataTableOutput("MESparameters")
)
),
tabPanel("MES Time Stamps",
fluidRow(
DT::dataTableOutput("MEStime")
)
),
tabPanel("MES Submitters",
fluidRow(
DT::dataTableOutput("MESsubmitter")
)
),
tabPanel("MES Total",
fluidRow(
DT::dataTableOutput("MEStotal")
)
)
),
#Scrap Codes table rendering
tabPanel("Scrap Codes",
fluidRow(
DT::dataTableOutput("scrapcodes")
)
),
#Applied Stats Data table rendering
navbarMenu("AppStats Data",
#Single Extrusion PPS Data
tabPanel("Nexiv",
fluidRow(
DT::dataTableOutput("nexiv")
)
),
tabPanel("Laserlinc",
fluidRow(
DT::dataTableOutput("laserlinc")
)
)
),
#Shopping Cart
#'This renders the shopping cart in an absolute panels that is always visible and
#'allows for a user to select the output data with associated batches
absolutePanel("Shopping Cart",
bottom = 100, right = 20, width = 600,
draggable = TRUE,
wellPanel(
dataTableOutput("shoppingcart")
),
style = "opacity: 0.92"
) #end absolutePanel#end Part Catalog
)#end ui
runApp('App_Server_Q3.R')
test <- list("hello", "hi")
test
test[[3]] <- multi_pps_data
test[[3]] <- single_pps_data
test
runApp('App_Server_Q3.R')
runApp('App_Server_Q3.R')
runApp('App_Server_Q3.R')
runApp('App_Server_Q3.R')
runApp('App_Server_Q3.R')
runApp('App_Server_Q3.R')
runApp('App_Server_Q3.R')
runApp('App_Server_Q3.R')
runApp('App_Server_Q3.R')
runApp('App_Server_Q3.R')
runApp('App_Server_Q3.R')
runApp('App_Server_Q3.R')
runApp('App_Server_Q3.R')
runApp('App_Server_Q3.R')
c(c(1,2,3), c(3,1))
which(c(1,2,3) %in% c(3,1))
test1 <- c(1,2,3)
test2 <- c(4,2,3)
all.equal(test1, test2)
test1 == test2
grep("FALSE,(test1 == test2))
grep("FALSE",(test1 == test2))
length(10)
runApp('App_Server_Q3.R')
runApp('App_Server_Q3.R')
runApp('App_Server_Q3.R')
runApp('App_Server_Q3.R')
runApp('App_Server_Q3.R')
runApp('App_Server_Q3.R')
runApp('App_Server_Q3.R')
runApp('App_Server_Q3.R')
runApp('App_Server_Q3.R')
