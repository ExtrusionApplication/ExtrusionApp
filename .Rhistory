width = 8,
wellPanel(#a well panel to store the box for choosing the grouping
id = "ploteditwellpanel", style = "overflow-y:scroll; height: 600px",
tabBox(
title = "Edit Plot Formatting",
id = "ploteditbox",
tabPanel("Edit Axes",
radioButtons("changexticks", "Change the Spacing for the X Axis Ticks?",
choices = list("No" = 0, "Yes" = 1),
selected = "0"),
conditionalPanel(#appears if the ticks will be changed
condition = "input.changexticks == '1'",
textInput(inputId = "xtickspacing",
label = "Input the Spacing for the Tick Marks",
value = "10"
)
),#end conditionPanel
radioButtons("xaxis_scale", "Choose a Scale for the X-Axis",
choices = list("Linear" = 1, "Log" = 2),
selected = "1"),
radioButtons("changeyticks", "Change the Spacing for the Y Axis Ticks?",
choices = list("No" = 0, "Yes" = 1),
selected = "0"),
conditionalPanel(#appears if the ticks will be changed
condition = "input.changeyticks == '1'",
textInput(inputId = "ytickspacing",
label = "Input the Spacing for the Tick Marks",
value = "10"
)
),#end conditionPanel
radioButtons("yaxis_scale", "Choose a Scale for the Y-Axis",
choices = list("Linear" = 1, "Log" = 2),
selected = "1")
),
tabPanel("Edit Legend")
) #end tabbox
)#end wellPanel
)#end column
),#end fluidRow for the second row
fluidRow(
#fluid row for the analysis
column(
width = 4,
wellPanel(#a well panel to store the box for choosing the grouping
id = "overlaywellpanel", style = "overflow-y:scroll; height: 600px",
box(title = "Choose Data and Graph", solidHeader = TRUE,
status = "primary", collapsible = FALSE, width = 12,
radioButtons(inputId = "boxplotinput",
"Would you like to overlay a boxplot?",
choices = list("No" = 0, "Yes" = 1),
selected = "0"
),
radioButtons(inputId = "usejitter",
"Would you like to jitter the points to increase their seperation? (Hover and Color Grouping will not Work)",
choices = list("No" = 0, "Yes" = 1),
selected = "0"
)
) #end box
)#end wellPanel
)#end column
), #end fluidRow
fluidRow(
column(
width = 12,
dataTableOutput("testdatatable")
)
),
fluidRow(
#fluid row to hold the plots
column(
width = 12,
plotOutput("mainplotoutput",
hover = hoverOpts(id = "mainplot_hover", delay = 300),
brush = brushOpts(
id = "mainplot_brush",
# delay = 0,
# delayType = input$brush_policy,
# direction = input$brush_dir,
resetOnNew = TRUE)), #end plotui
uiOutput("mainplot_hover_info")
)
), #end fluid Row for main plot
fluidRow(#zoom plot plot
column(
width = 12,
plotOutput("zoomplot",
hover = hoverOpts(id = "zoomplot_hover", delay = 300)
),
uiOutput("zoomplot_hover_info")
)
),
fluidRow(
column(
width = 12,
dataTableOutput("zoomdatatable")
)
),
hr(),
fluidRow(
column(
width = 12,
tags$h2("Omitted Data Beacause it was NA or Empty"),
dataTableOutput("omitteddatatable")
)
),
fluidRow(
column(
width = 3,
downloadButton('downloadfiltereddata','Download Filtered Data')
),
column(
width = 3,
downloadButton('downloadzoomdata','Download Zoom Data')
),
column(
width = 3,
downloadButton('downloadomitteddata','Download Omitted Data')
)
)
) #end tabItem for MES DataAnalysis
## Only Analysis Tab ##
# tabItem(tabName="MESDataAnalysis",
#   # Some custom CSS
#   tags$head(
#     tags$style(HTML("
#                     /* Smaller font for preformatted text */
#                     pre, table.table {
#                     font-size: smaller;
#                     }
#
#                     body {
#                     min-height: 2000px;
#                     }
#
#                     .option-group {
#                     border: 1px solid #ccc;
#                     border-radius: 6px;
#                     padding: 0px 5px;
#                     margin: 5px -10px;
#                     background-color: #c1c1c1;
#                     }
#
#                     .option-header {
#                     color: #000000;
#                     text-transform: uppercase;
#                     margin-bottom: 5px;
#                     }
#                     .option-label{
#                     color: #000000;
#                     margin-bottom: 1px;
#                     padding: 0px 5px;
#                     }
#                     .inputbox{
#                     background-color: #000000;
#                     }
#                     "))),
#
#   fluidRow(
#     column(width = 3,
#            box(title = "Explorer",
#                solidHeader = TRUE, status = "info", collapsible = TRUE, width = 12,
#                div(class = "option-group",
#                    radioButtons("Data_set", "Data Set",
#                                 c("Single", "Multi","Tapered","Upload"), inline = TRUE),
#                    conditionalPanel(
#                      "input.Data_set ==='Upload'",
#                      div(style="display: inline-block;vertical-align:top;width: 250px;",
#                          fileInput("uploadfile", "Choose csv File",
#                                    multiple = TRUE,
#                                    accept = c("text/csv",
#                                               "text/comma-separated-values,text/plain",
#                                               ".csv"))),
#                      div(style="display: inline-block;vertical-align:top;width: 50px;",
#                          checkboxInput("header", "Header", TRUE)),
#                      checkboxInput("Preview","Preview",F),
#                      #preview the uploaded dataset
#                      conditionalPanel(
#                        condition="input.Preview",
#                        DT::dataTableOutput("UploadDataPreview")
#                      )
#
#                    )#end conditional panel for the upload file
#                ),# end Data Set section
#
#                div(class="option-group",
#                    div(class="option-header","Plot"),
#                    textInput("plottitle","Plot Title",placeholder = NULL),
#
#
#                    div(style="display: inline-block;vertical-align:top;width: 150px;",
#                        uiOutput("Xvar_ui")),
#                    div(style="display: inline-block;vertical-align:top;width: 150px;",
#                        uiOutput("Yvar_ui")),
#
#                    conditionalPanel(
#                      condition = "input.Data_set !='Upload'",
#                      checkboxGroupInput("PlotType","Plot Type",
#                                         choiceNames =
#                                           list("Scatter","Line"),
#                                         choiceValues =
#                                           list("Scatter","Line"),
#                                         selected = "Scatter",inline = T
#                      ),
#                      uiOutput("Groupby_ui")
#                    ) # End conditionalpanel for Mtcars
#                ),#end Plot section
#
#                div(class="option-group",
#                    div(class="option-header","Filters"),
#
#                    dateRangeInput("daterange6", "Date range:",
#                                   startview = "decade")
#
#                    # dropdownButton(
#                    #     label = "Filter",status = "default", width = 80,
#                    #     #actionButton(inputId = "de", label = "Sort A to Z", icon = icon("sort-alpha-asc")),# filter  (filter icon)
#                    #     #actionButton(inputId = "as", label = "Sort Z to A", icon = icon("sort-alpha-desc")),
#                    #
#                    #     tags$div(
#                    #       class = "container",
#                    #       uiOutput("filter_ui")   # to have reactive dropdown list
#                    #     ),
#                    #     actionButton(inputId = "filter_select", label = "(un)select all")  #an action button to select or unselect all
#                    #   ) #end Filter
#
#                ),#End Filter section
#                div(class = "option-group",
#                    div(class = "option-header", "Download"),
#                    radioButtons('GraphFormat', 'Graph format', c('PDF', 'png'),
#                                 inline = TRUE),
#                    downloadButton("GraphDownload_DataAnalysis","Download Graph")
#                )#end download secion
#            )
#
#     ), #end plot managing section
#
#     column(width = 9, class = "well",
#            box(title = "Plot", solidHeader = TRUE, status = "primary", collapsible = TRUE, width = 12,
#                column(width = 6,
#                       uiOutput("plotui")
#                ),
#                column(width = 6,
#                       plotOutput("MES_plot2")
#                )),#end plot section
#
#
#            fluidRow(
#              h4("Points selected by brushing"),
#              DT::dataTableOutput("plot_brushed_points")
#            ), #end brushed points section
#
#            fluidRow(
#              downloadButton("SelectedDataDownload_DataAnalysis","Download Selected Data")
#            )# end download dataset section
#            )
#     )
#   )#end Analysis Tool
),#end tabItems
absolutePanel(
#this will display the title
htmlOutput("currenttabtitle", container = tags$h2, style = "color: white"),
draggable = F, fixed = F,
style = "z-index: 999999; top: -5px; left: 45%;"
),
#create a pop up window for the shopping cart
absolutePanel(
actionButton("ShoppingCart","",icon=icon("shopping-cart","fa-2x"),width = 80 ),
#verbatimTextOutput("ShoppingCart_Count"),     # Try to add the number of part-number in shopping cart behind the cart icon
bsModal("modalExample", "Shopping Cart", "ShoppingCart", size = "default",
tabsetPanel(
tabPanel("Single-Extrusion Cart",
textInput("SinglePartNum_input","Part Number"),
actionButton("singleMadd_button","Add"),
dataTableOutput("singleshoppingcartparts"),
dataTableOutput("singleshoppingcart")
),
tabPanel("Multi-Layer Extrusion Cart",
textInput("MultiPartNum_input","Part Number"),
actionButton("multiMadd_button","Add"),
dataTableOutput("multishoppingcartparts"),
dataTableOutput("multishoppingcart")
#Multi-layer Extrusion Parts
),
tabPanel("Tapered Extrusion Cart",
textInput("TaperedPartNum_input","Part Number"),
actionButton("taperedMadd_button","Add"),
dataTableOutput("taperedshoppingcartparts"),
dataTableOutput("taperedshoppingcart")
#Tapered Extrusion Parts
),
tabPanel("Total Extrusion Cart",
#Total Extrusion Parts
dataTableOutput("totalshoppingcartparts"),
dataTableOutput("totalshoppingcart")
)
)
),
draggable = F,right = 10,top = 3, fixed = F,
style = "z-index: 999999"
) #end absolutePanel
)#end dashboardbody
) #end UI
runApp('App_Server_Q3.R')
runApp('App_Server_Q3.R')
runApp('App_Server_Q3.R')
runApp('App_Server_Q3.R')
runApp('App_Server_Q3.R')
require(shiny)
require(bootstrap)
require(jpeg)
require(ggplot2)
require(ggExtra)
require(ggdendro)
require(DT)
require(stringr)
require(gsubfn)
require(proto)
require(sqldf)
require(shinyjs)
require(shinyBS)
require(shinydashboard)
require(plotly)
require(googleVis)
require(lubridate)
runApp('App_Server_Q3.R')
require(shiny)
require(bootstrap)
require(jpeg)
require(ggplot2)
require(ggExtra)
require(ggdendro)
require(DT)
require(stringr)
require(gsubfn)
require(proto)
require(sqldf)
require(shinyjs)
require(shinyBS)
require(shinydashboard)
require(plotly)
require(googleVis)
require(lubridate)
runApp('App_Server_Q3.R')
require(shiny)
require(bootstrap)
require(jpeg)
require(ggplot2)
require(ggExtra)
require(ggdendro)
require(DT)
require(stringr)
require(gsubfn)
require(proto)
require(sqldf)
require(shinyjs)
require(shinyBS)
require(shinydashboard)
require(plotly)
require(googleVis)
require(lubridate)
runApp('App_Server_Q3.R')
require(shiny)
require(bootstrap)
require(jpeg)
require(ggplot2)
require(ggExtra)
require(ggdendro)
require(DT)
require(stringr)
require(gsubfn)
require(proto)
require(sqldf)
require(shinyjs)
require(shinyBS)
require(shinydashboard)
require(plotly)
require(googleVis)
require(lubridate)
runApp('App_Server_Q3.R')
library(shiny); runApp('App_Server_Q3.R')
require(shiny)
require(bootstrap)
require(jpeg)
require(ggplot2)
require(ggExtra)
require(ggdendro)
require(DT)
require(stringr)
require(gsubfn)
require(proto)
require(sqldf)
require(shinyjs)
require(shinyBS)
require(shinydashboard)
require(plotly)
require(googleVis)
require(lubridate)
runApp('App_Server_Q3.R')
runApp('App_Server_Q3.R')
runApp('App_Server_Q3.R')
runApp('App_Server_Q3.R')
library(shiny); runApp('App_Server_Q3.R')
require(shiny)
require(bootstrap)
require(jpeg)
require(ggplot2)
require(ggExtra)
require(ggdendro)
require(DT)
require(stringr)
require(gsubfn)
require(proto)
require(sqldf)
require(shinyjs)
require(shinyBS)
require(shinydashboard)
require(plotly)
require(googleVis)
require(lubridate)
runApp('App_Server_Q3.R')
require(shiny)
require(bootstrap)
require(jpeg)
require(ggplot2)
require(ggExtra)
require(ggdendro)
require(DT)
require(stringr)
require(gsubfn)
require(proto)
require(sqldf)
require(shinyjs)
require(shinyBS)
require(shinydashboard)
require(plotly)
require(googleVis)
require(lubridate)
runApp('App_Server_Q3.R')
runApp('App_Server_Q3.R')
require(shiny)
require(bootstrap)
require(jpeg)
require(ggplot2)
require(ggExtra)
require(ggdendro)
require(DT)
require(stringr)
require(gsubfn)
require(proto)
require(sqldf)
require(shinyjs)
require(shinyBS)
require(shinydashboard)
require(plotly)
require(googleVis)
require(lubridate)
runApp('App_Server_Q3.R')
runApp('App_Server_Q3.R')
require(shiny)
require(bootstrap)
require(jpeg)
require(ggplot2)
require(ggExtra)
require(ggdendro)
require(DT)
require(stringr)
require(gsubfn)
require(proto)
require(sqldf)
require(shinyjs)
require(shinyBS)
require(shinydashboard)
require(plotly)
require(googleVis)
require(lubridate)
runApp('App_Server_Q3.R')
filepath <- "//mapfile18/shared/Sustaining Engineering/Symetis/BSC Ecublens Quality System (Snapshot from June 2017)/INSP_Inspection_Plan/1_Released"
library(readxl)
list.files(filepath)
list.files(filepath, pattern = ".doc")
files <- list.files(filepath, pattern = ".doc")
strsplit(files, "_")
unlist(strsplit(files, "_"))
grep(unlist(strsplit(files, "_")), "INSP", ignore.case = F)
grep( "INSP", unlist(strsplit(files, "_")),ignore.case = F)
test <- nlist(strsplit(files, "_"))
test <- unlist(strsplit(files, "_"))
numbers <- test[grep( "INSP", unlist(strsplit(files, "_")),ignore.case = F)]
test
grep( "INSP", unlist(strsplit(files, "_")),ignore.case = F)
numbers
write.csv(numbers, "forJose.csv")
getwd()
which(duplicated(numbers))
require(shiny)
require(bootstrap)
require(jpeg)
require(ggplot2)
require(ggExtra)
require(ggdendro)
require(DT)
require(stringr)
require(gsubfn)
require(proto)
require(sqldf)
require(shinyjs)
require(shinyBS)
require(shinydashboard)
require(plotly)
require(googleVis)
require(lubridate)
runApp('App_Server_Q3.R')
