column(6,
conditionalPanel(
condition = "input.PCTAT_d",
numericInput("PCTAT_min",label = NULL,value=PCTATmin,step=5)
)
),
column(6,
conditionalPanel(
condition = "input.PCTAT_d",
numericInput("PCTAT_max",label = NULL,value=PCTATmax,step=5)
)
))),
column(3,
fluidRow(checkboxInput("PCTDT1_d","Die 1 Temperature F",value=F)),
fluidRow(
column(6,
conditionalPanel(
condition = "input.PCTDT1_d",
numericInput("PCTDT1_min",label = NULL,value=PCTDT1min,step=5)
)
),
column(6,
conditionalPanel(
condition = "input.PCTDT1_d",
numericInput("PCTDT1_max",label = NULL,value=PCTDT1max,step=5)
)
))),
column(3,
fluidRow(checkboxInput("PCTDT2_d","Die 2 Temperature F",value=F)),
fluidRow(
column(6,
conditionalPanel(
condition = "input.PCTDT2_d",
numericInput("PCTDT2_min",label = NULL,value=PCTDT2min,step=5)
)
),
column(6,
conditionalPanel(
condition = "input.PCTDT2_d",
numericInput("PCTDT2_max",label = NULL,value=PCTDT2max,step=5)
)
)))), #end Processing Attribute 2
#Dimentional Attribute
fluidRow(
tags$h1(strong("Dimentional Attribute"),style="font-size:25px;",align="left"),
column(2,
fluidRow(checkboxInput("PCTPIDI_d","Proximal Inner Diameter (in)",value=TRUE)),
fluidRow(
column(6,
conditionalPanel(
condition = "input.PCTPIDI_d",
numericInput("PCTPIDI_min",label = NULL,value=PCTPIDImin,step=0.001)
)
),
column(6,
conditionalPanel(
condition = "input.PCTPIDI_d",
numericInput("PCTPIDI_max",label = NULL,value=PCTPIDImax,step=0.001)
)
))),
column(2,
fluidRow(checkboxInput("PCTPODI_d","Proximal Outer Diameter (in)",value=TRUE)),
fluidRow(
column(6,
conditionalPanel(
condition = "input.PCTPODI_d",
numericInput("PCTPODI_min",label = NULL,value=PCTPODImin,step=0.001)
)
),
column(6,
conditionalPanel(
condition = "input.PCTPODI_d",
numericInput("PCTPODI_max",label = NULL,value=PCTPODImax,step=0.001)
)
))),
column(2,
fluidRow(checkboxInput("PCTPWT_d","Proximal Wall Thickness (in)",value=TRUE)),
fluidRow(
column(6,
conditionalPanel(
condition = "input.PCTPWT_d",
numericInput("PCTPWT_min",label = NULL,value=PCTPWTmin,step=0.001)
)
),
column(6,
conditionalPanel(
condition = "input.PCTPWT_d",
numericInput("PCTPWT_max",label = NULL,value=PCTPWTmax,step=0.001)
)
))),
column(2,
fluidRow(checkboxInput("PCTPOR_d","Proximal Out of Roundness (in)",value=F)),
fluidRow(
column(6,
conditionalPanel(
condition = "input.PCTPOR_d",
numericInput("PCTPOR_min",label = NULL,value=PCTPORmin,step=0.001)
)
),
column(6,
conditionalPanel(
condition = "input.PCTPOR_d",
numericInput("PCTPOR_max",label = NULL,value=PCTPORmax,step=0.001)
)
))),
column(2,
fluidRow(checkboxInput("PCTPCCT_d","Proximal Concentricity",value=F)),
fluidRow(
column(6,
conditionalPanel(
condition = "input.PCTPCCT_d",
numericInput("PCTPCCT_min",label = NULL,value=PCTPCCTmin,step=0.0001)
)
),
column(6,
conditionalPanel(
condition = "input.PCTPCCT_d",
numericInput("PCTPCCT_max",label = NULL,value=PCTPCCTmax,step=0.0001)
)
)))
), #end Dimentional Attribute 1
fluidRow(
column(2,
fluidRow(checkboxInput("PCTDIDI_d","Distal Inner Diameter (in)",value=TRUE)),
fluidRow(
column(6,
conditionalPanel(
condition = "input.PCTDIDI_d",
numericInput("PCTDIDI_min",label = NULL,value=PCTDIDImin,step=0.001)
)
),
column(6,
conditionalPanel(
condition = "input.PCTDIDI_d",
numericInput("PCTDIDI_max",label = NULL,value=PCTDIDImax,step=0.001)
)
))),
column(2,
fluidRow(checkboxInput("PCTDODI_d","Distal Outer Diameter (in)",value=TRUE)),
fluidRow(
column(6,
conditionalPanel(
condition = "input.PCTDODI_d",
numericInput("PCTDODI_min",label = NULL,value=PCTDODImin,step=0.001)
)
),
column(6,
conditionalPanel(
condition = "input.PCTDODI_d",
numericInput("PCTDODI_max",label = NULL,value=PCTDODImax,step=0.001)
)
))),
column(2,
fluidRow(checkboxInput("PCTDWT_d","Distal Wall Thickness (in)",value=TRUE)),
fluidRow(
column(6,
conditionalPanel(
condition = "input.PCTDWT_d",
numericInput("PCTDWT_min",label = NULL,value=PCTDWTmin,step=0.001)
)
),
column(6,
conditionalPanel(
condition = "input.PCTDWT_d",
numericInput("PCTDWT_max",label = NULL,value=PCTDWTmax,step=0.001)
)
))),
column(2,
fluidRow(checkboxInput("PCTDOR_d","Distal Out of Roundness (in)",value=F)),
fluidRow(
column(6,
conditionalPanel(
condition = "input.PCTDOR_d",
numericInput("PCTDOR_min",label = NULL,value=PCTDORmin,step=0.001)
)
),
column(6,
conditionalPanel(
condition = "input.PCTDOR_d",
numericInput("PCTDOR_max",label = NULL,value=PCTDORmax,step=0.001)
)
))),
column(2,
fluidRow(checkboxInput("PCTDCCT_d","Distal Concentricity",value=F)),
fluidRow(
column(6,
conditionalPanel(
condition = "input.PCTDCCT_d",
numericInput("PCTDCCT_min",label = NULL,value=PCTDCCTmin,step=0.0001)
)
),
column(6,
conditionalPanel(
condition = "input.PCTDCCT_d",
numericInput("PCTDCCT_max",label = NULL,value=PCTDCCTmax,step=0.0001)
)
)))
), #end Dimentional Attribute 2
fluidRow(
column(2,
fluidRow(checkboxInput("PCTPLength_d","Proximal Length (in)",value=F)),
fluidRow(
column(6,
conditionalPanel(
condition = "input.PCTPLength_d",
numericInput("PCTPLength_min",label = NULL,value=PCTPLengthmin,step=1)
)
),
column(6,
conditionalPanel(
condition = "input.PCTPLength_d",
numericInput("PCTPLength_max",label = NULL,value=PCTPLengthmax,step=1)
)
))),
column(2,
fluidRow(checkboxInput("PCTTLength_d","Transition Length (in)",value=F)),
fluidRow(
column(6,
conditionalPanel(
condition = "input.PCTTLength_d",
numericInput("PCTTLength_min",label = NULL,value=PCTTLengthmin,step=1)
)
),
column(6,
conditionalPanel(
condition = "input.PCTTLength_d",
numericInput("PCTTLength_max",label = NULL,value=PCTTLengthmax,step=1)
)
))),
column(2,
fluidRow(checkboxInput("PCTDLength_d","Distal Length (in)",value=F)),
fluidRow(
column(6,
conditionalPanel(
condition = "input.PCTDLength_d",
numericInput("PCTDLength_min",label = NULL,value=PCTDLengthmin,step=1)
)
),
column(6,
conditionalPanel(
condition = "input.PCTDLength_d",
numericInput("PCTDLength_max",label = NULL,value=PCTDLengthmax,step=1)
)
))),
column(2,
fluidRow(checkboxInput("PCTToLength_d","Total Length (in)",value=F)),
fluidRow(
column(6,
conditionalPanel(
condition = "input.PCTToLength_d",
numericInput("PCTToLength_min",label = NULL,value=PCTToLengthmin,step=1)
)
),
column(6,
conditionalPanel(
condition = "input.PCTToLength_d",
numericInput("PCTToLength_max",label = NULL,value=PCTToLengthmax,step=1)
)
))),
column(2,
fluidRow(checkboxInput("PCTPPD_d","Perpendicularity (in)",value=F)),
fluidRow(
conditionalPanel(
condition = "input.PCTPPD_d",
selectInput("PCTPPD",label = NULL,
c("All",unique(as.character(single_pps_data$`Perpendicularity (in)`))))
)))
),#end of attribute 3
#Special Operation
fluidRow(
tags$h1(strong("Special Operation"),style="font-size:25px;",align="left"),
column(1,
fluidRow(checkboxInput("PCTNEXIV_d","NEXIV",value=F)),
fluidRow(
conditionalPanel(
condition = "input.PCTNEXIV_d",
selectInput("PCTNEXIV",label = NULL,choices=c("All","yes","NA"))
))),
column(1,
fluidRow(checkboxInput("PCTAnnealed_d","Annealed",value=F)),
fluidRow(
conditionalPanel(
condition = "input.PCTAnnealed_d",
selectInput("PCTAnnealed",label = NULL,choices=c("All","yes","NA"))
))),
column(1,
fluidRow(checkboxInput("PCTCaliper_d","Caliper",value=F)),
fluidRow(
conditionalPanel(
condition = "input.PCTCaliper_d",
selectInput("PCTCaliper",label = NULL,choices=c("All","yes","NA"))
))),
column(1,
fluidRow(checkboxInput("PCTOS_d","OD Sort",value=F)),
fluidRow(
conditionalPanel(
condition = "input.PCTOS_d",
selectInput("PCTOS",label = NULL,choices=c("All","yes","NA"))
))),
column(1,
fluidRow(checkboxInput("PCTMP_d","Melt Pump",value=F)),
fluidRow(
conditionalPanel(
condition = "input.PCTMP_d",
selectInput("PCTMP",label = NULL,choices=c("All","yes","NA"))
))),
column(1,
fluidRow(checkboxInput("PCTHT_d","Hypo Tip",value=F)),
fluidRow(
conditionalPanel(
condition = "input.PCTHT_d",
selectInput("PCTHT",label = NULL,choices=c("All","yes","NA"))
))),
column(1,
fluidRow(checkboxInput("PCTSPD_d","Sparker Die",value=F)),
fluidRow(
conditionalPanel(
condition = "input.PCTSPD_d",
selectInput("PCTSPD",label = NULL,choices=c("All","yes","NA"))
))),
column(1,
fluidRow(checkboxInput("PCTSLD_d","Slicking Die",value=F)),
fluidRow(
conditionalPanel(
condition = "input.PCTSLD_d",
selectInput("PCTSLD",label = NULL,choices=c("All","yes","NA"))
))),
column(1,
fluidRow(checkboxInput("PCTDLN_d","Delamination",value=F)),
fluidRow(
conditionalPanel(
condition = "input.PCTDLN_d",
selectInput("PCTDLN",label = NULL,choices=c("All","yes","NA"))
))),
column(1,
fluidRow(checkboxInput("PCTULT_d","Ultrasonic",value=F)),
fluidRow(
conditionalPanel(
condition = "input.PCTULT_d",
selectInput("PCTULT",label = NULL,choices=c("All","yes","NA"))
))),
column(1,
fluidRow(checkboxInput("PCTVC_d","Vacuum Calibration",value=F)),
fluidRow(
conditionalPanel(
condition = "input.PCTVC_d",
selectInput("PCTVC",label = NULL,choices=c("All","yes","NA"))
))),
column(1,
fluidRow(checkboxInput("PCTIRD_d","Irradiated",value=F)),
fluidRow(
conditionalPanel(
condition = "input.PCTIRD_d",
selectInput("PCTIRD",label = NULL,choices=c("All","yes","NA"))
)))
), #end Special Operation
fluidRow(
DT::dataTableOutput("mytable3")
),
fluidRow(
downloadButton('downloadTPPSData','Download Tapered PPS Data')
)
)#end Tapered Extrusion PPS Data
),
#Single Extrusion MES Data table rendering
navbarMenu("Single Extrusion MES Data",
tabPanel("MES Parameters and Yield",
fluidRow(
DT::dataTableOutput("singleMESparameters")
)
),
tabPanel("MES Time Stamps",
fluidRow(
DT::dataTableOutput("singleMEStime")
)
),
tabPanel("MES Submitters",
fluidRow(
DT::dataTableOutput("singleMESsubmitter")
)
),
tabPanel("MES Total",
fluidRow(
DT::dataTableOutput("singleMEStotal")
)
)
),
#Multi-Layer Extrusion MES Data table rendering
navbarMenu("Multi-Layer Extrusion MES Data",
tabPanel("MES Parameters and Yield",
fluidRow(
)
),
tabPanel("MES Time Stamps",
fluidRow(
)
),
tabPanel("MES Submitters",
fluidRow(
)
),
tabPanel("MES Total",
fluidRow(
)
)
),
#Tapered Extrusion MES Data table rendering
navbarMenu("Single Extrusion MES Data",
tabPanel("MES Parameters and Yield",
fluidRow(
)
),
tabPanel("MES Time Stamps",
fluidRow(
)
),
tabPanel("MES Submitters",
fluidRow(
)
),
tabPanel("MES Total",
fluidRow(
)
)
),
#Scrap Codes Data table rendering
navbarMenu("Scrap Codes",
#Single Extrusion PPS Data
tabPanel("Single Extrusion",
fluidRow(
DT::dataTableOutput("singlescrapcodes")
)
),
tabPanel("Multi-Layer Extrusion",
fluidRow(
)
),
tabPanel("Tapered Extrusion",
fluidRow(
)
)
),
#Applied Stats Data table rendering
# navbarMenu("AppStats Data",
#            #Single Extrusion PPS Data
#            tabPanel("Nexiv",
#                     fluidRow(
#                       DT::dataTableOutput("nexiv")
#                     )
#            ),
#            tabPanel("Laserlinc",
#                     fluidRow(
#                       DT::dataTableOutput("laserlinc")
#                     )
#            )
# ), #end the NavbarMenu
#Shopping Cart PPS Data table rendering
navbarMenu("Shopping Cart PPS Data",
#Single Extrusion PPS Data
tabPanel("Single Extrusion",
fluidRow(
DT::dataTableOutput("singleshoppingcartpps"),
fluidRow(
downloadButton('singlecartdownloadpps',
'Download Single Shopping Cart PPS Data')
)
)
),
tabPanel("Multi-Layer Extrusion",
fluidRow(
)
),
tabPanel("Tapered Extrusion",
fluidRow(
)
)
),
#create a pop up window for the shopping cart
absolutePanel(
actionButton("ShoppingCart","",icon=icon("shopping-cart","fa-2x"),width = 80 ),
#verbatimTextOutput("ShoppingCart_Count"),     # Try to add the number of part-number in shopping cart behind the cart icon
bsModal("modalExample", "Shopping Cart", "ShoppingCart", size = "default",
tabsetPanel(
tabPanel("Single-Extrusion Cart",
textInput("SinglePartNum_input","Part Number"),
actionButton("singleMadd_button","Add"),
DT::dataTableOutput("singleshoppingcartparts"),
dataTableOutput("singleshoppingcart")
),
tabPanel("Multi-Layer Extrusion Cart"
#Multi-layer Extrusion Parts
),
tabPanel("Tapered Extrusion Cart"
#Tapered Extrusion Parts
),
tabPanel("Total Extrusion Cart"
#Total Extrusion Parts
)
)
),
draggable = F,right = 20,top = 100,fixed = T
)
#Shopping Cart
#'This renders the shopping cart in an absolute panels that is always visible and
#'allows for a user to select the output data with associated batches
#'
#### Extra HTML ####
#Draggable and Resizeable absolutepanel
# HTML("<script>$(\".draggable\").draggable();</script>")
)#end ui
runApp('App_Server_Q3.R')
runApp('App_Server_Q3.R')
