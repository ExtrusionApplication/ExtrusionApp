column(
width = 4,
wellPanel(#a well panel to store the box for choosing the data
id = "datawellpanel", style = "overflow-y:scroll; max-height: 500px",
box(title = "Choose Data and Graph", solidHeader = TRUE,
status = "primary", collapsible = TRUE, width = 12,
#radio button to choose the data set
radioButtons(inputId = "dataset",
#'this controls the data set a user chooses
label = "Choose a Data Set to Analyze",
choiceNames = c("Single", "Multi","Tapered"),
choiceValues = c(1,2,3)
),
conditionalPanel(
#only appears once a data set has been chosen
condition = "input.dataset",
radioButtons(inputId = "graphpackage",
#'this controls what type of graphs are available
label = "Select a Chart/Graph Type",
choiceNames = c("Google Plot (zoom works on Internet Explorer)",
"GGplot2",
"Plotly"),
choiceValues = c(1,2,3)
)
),#end conditionPanel of PD Custom
#'the selectinputs for the graph type are all the same, which package
#'is used to render the graph is determined by the choice value for the graph
#'it follows this pattern:
#'first integer -> graph group (1 = google, 2 = ggplot2, 3 = plotly)
#'second integeger -> special or non special graph (0 = not-special,
#'2 = dendrogram, 3 = parallel coordinates, 4 = google motion chart)
#'third integer -> degrees of freedom
#'fourth integer -> is color a degree of freedom (0 = no, 1 = yes)
#'fifth integer -> is size a degree of freedom (0 = no, 1 = yes)
#'sixth integer -> does the graph allow multiple traces (0 = no, 1 = yes)
#'7 and 8 integer -> graph ID (currently starts at 06).
conditionalPanel(
condition = "input.graphpackage == '1'",
#this only appears of Google Plot is selected
selectInput(inputId = "graphtype",
#'the regular 2D charts will be less than 10 for value
#'the combo charts for two data sets per category will be
#'between 10 - 20
#'individual charts will be greater than 100
#'3
label = "Select a Chart/Graph Type",
choices = list("Scatter Chart" = 6,
"Line Chart" = 7,
"Line Chart with 2 Y-Axes" = 8,
"Bar Chart (Horzintal Bars)" = 9,
"Column Chart (Vertical Bars)" = 10,
"Area Chart" = 11,
"Stepped Area Chart" = 12,
"Bubble Chart" = 14,
"Pie Chart" = 15,
"Histogram" = 16,
"Motion Chart" = 17,
"Annotation Time Line Chart" = 18)
)
),#end conditionPanel of Google Plot
conditionalPanel(
condition = "input.graphpackage == '2'",
#this only appears of GGplot2 is selected
selectInput(inputId = "graphtype",
#'for a 2D graph on certain options are available
#'if the value is greater than 10, it has 3 degress of freedom
#'Marginal plots are in the 20s and have distributions along
#'the axis
#'
label = "Select a Chart/Graph Type",
choices = list("Scatter Plot" = 19,
"Counts Plot" = 20,
"Area Chart" = 21,
"Ordered Bar Chart" = 22,
"Histogram" = 23,
"Density Plot" = 24,
"Box Plot" = 25,
"Pie Chart" = 26,
"Bubble Plot" = 27,
"Tree Map" = 28,
"Marginal Histogram" = 29,
"Marginal Boxplot" = 30,
"Dendrogram" = 31,
"Cluster for PCA" = 32)
)
),#end conditionPanel of GGplot2
conditionalPanel(
condition = "input.graphpackage == '3'",
#this only appears of PD custom is available
selectInput(inputId = "graphtype",
#'for a 2D graph on certain options are available
#'if the value is greater than 10, it has 3 axis,
#'things such as a heat map and bubble plot
label = "Select a Chart/Graph Type",
choices = list("Scatter Plot" = 33,
"Line Plot" = 34,
"Filled Area Plot" = 35,
"Box Plot" = 36,
"Histogram" = 37,
"2D Histogram" = 38,
"Bubble Chart" = 39,
"Heat Map" = 40,
"Stacked Area Plot" = 41,
"3D Scatter Plot" = 42,
"3D Line Plot" = 43,
"3D Mesh Plot" = 44,
"3D Mesh Plot" = 45,
"Parallel Coordinates Plot" = 46)
)
)#end conditionPanel of Plotly
)#end box for choosing data set and graph
)#end wellPanel
),#end column
column(
#'this column will contain the parameters needed to plot the graph such as
#'defining the axes, defining the id, etc.
width = 4,
wellPanel(#a well panel to store the box for choosing the data
id = "datawellpanel", style = "overflow-y:scroll; max-height: 500px",
box(title = "Select the Parameters for the Graph", solidHeader = TRUE,
status = "primary", collapsible = TRUE, width = 12,
uiOutput("graphaxeshtmloutput")
)#end box
)#end wellPanel
),#end column
column(
#'this column will contain the filters for the data
width = 4,
wellPanel(#a well panel to store the box for filtering the data
id = "filterwellpanel", style = "overflow-y:scroll; max-height: 500px",
box(title = "Material Filter", solidHeader = TRUE,
status = "info", collapsible = TRUE, width = 12, collapsed = TRUE,
#radio button choose whether the filter is allowed to be used
#by default the filter will not eb used
radioButtons(inputId = "usematerialfilter",
label = "Do you want to use this filter?",
choices = list("Yes" = 1, "No" = 0),
selected = "0"),
conditionalPanel(#appears if the filter will be used
condition = "input.usematerialfilter == '1'",
#if the user has selected to use the material filter
tags$p("Placeholder")
# radioButtons(inputId = ""),
# selectizeInput(inputId = "materialfilter choices")
)#end conditionPanel
), #end box for Material Filter
box(title = "SAP Batch Filter", solidHeader = TRUE,
status = "info", collapsible = TRUE, width = 12, collapsed = TRUE,
tags$p("Placeholder")
),
box(title = "Line Filter", solidHeader = TRUE,
status = "info", collapsible = TRUE, width = 12, collapsed = TRUE,
tags$p("Placeholder")
),
box(title = "Date Range Filter", solidHeader = TRUE,
status = "info", collapsible = TRUE, width = 12, collapsed = TRUE,
tags$p("Placeholder")
),
box(title = "Choose a Column to Filter", solidHeader = TRUE,
status = "info", collapsible = TRUE, width = 12, collapsed = TRUE,
tags$p("Placeholder")
),
box(title = "Choose a Column to Filter", solidHeader = TRUE,
status = "info", collapsible = TRUE, width = 12, collapsed = TRUE,
tags$p("Placeholder")
)
)#end wellPanel for filters
)#end column for filters
) #end fluidRow
) #end tabItem for testanalysis
)#end tabItems
)#end dasboardBody
) #end UI
# Define server logic required to draw a histogram
server <- function(input, output, session) {
graphinformation <- reactiveValues(
graphaxeshtml = NULL
)
observeEvent(input$graphtype,{
graphtypeid <- input$graphtype #gets the graph id that lets the program know what type of graph
#'this will store the html to render the next questions that the user must answer to plot the
#'data.
axeshtml <- switch(graphtypeid,
"1" = #not curerntly available
Null,
"2" = #not curerntly available
Null,
"3" = #not curerntly available
Null,
"4" = #not curerntly available
Null,
"5" = #not curerntly available
Null,
"6" = #googleVis Scatter Plot
tagList(radioButtons("isxcategorical", "Would You Like to have the X-Axis be Categorical (Such as Having the X-Axis be Material Number, Line, Batch, Or Even Columns)",
choices = list("No" = 0, "Yes" = 1),
selected = "0"),
conditionalPanel(
condition = "input.isxcategorical == '0'",
#if the user does NOT want the x-axis to be categorical
selectInput("xaxis_data", "Choose Data for the X-Axis",
choices = colnames(tapered_tari_parameter_and_yield_data),
selected = NULL)
),
#if the user does want the x-axis to be categorical
conditionalPanel(
condition = "input.isxcategorical == '1'",
#if the user does want the x-axis to be categorical
radioButtons("xcategoricalselection", "Select What Grouping You want for the X Axis",
choices = list("Material Number" = 1, "Line" = 2,
"SAP Batch Number" = 3, "The Columns" = 4),
selected = "1"),
uiOutput("xaxis_data_render")
#the xaxis data will be inputted here by inserUI in the observe
#event of xcategoricalselection
), #end conditionPanel
selectInput("yaxis_data", "Choose Data for the Y-Axis",
choices = colnames(tapered_tari_parameter_and_yield_data),
selected = NULL),
radioButtons("xaxis_scale", "Choose a Scale for the X-Axis",
choices = list("Linear" = 1, "Log" = 2),
selected = NULL),
radioButtons("yaxis_scale", "Choose a Scale for the Y-Axis",
choices = list("Linear" = 1, "Log" = 2),
selected = NULL)
),
"7" = #googleVis Line Chart
list(radioButtons("isxcategorical", "Would You Like to have the X-Axis be Categorical (Such as Having the X-Axis be Material Number, Line, Batch, Or Even Columns)",
choices = list("No" = 0, "Yes" = 1),
selected = "0"),
conditionalPanel(
condition = "input.isxcategorical == '0'",
#if the user does NOT want the x-axis to be categorical
selectInput("xaxis_data", "Choose Data for the X-Axis",
choices = colnames(tapered_tari_parameter_and_yield_data),
selected = NULL)
),
#if the user does want the x-axis to be categorical
conditionalPanel(
condition = "input.isxcategorical == '1'",
#if the user does want the x-axis to be categorical
radioButtons("xcategoricalselection", "Select What Grouping You want for the X Axis",
choices = list("Material Number" = 1, "Line" = 2,
"SAP Batch Number" = 3, "The Columns" = 4),
selected = "1"),
uiOutput("xaxis_data_render")
#the xaxis data will be inputted here by inserUI in the observe
#event of xcategoricalselection
), #end conditionPanel
selectInput("yaxis_data", "Choose Data for the Y-Axis",
choices = colnames(tapered_tari_parameter_and_yield_data),
selected = NULL),
radioButtons("xaxis_scale", "Choose a Scale for the X-Axis",
choices = list("Linear" = 1, "Log" = 2),
selected = NULL),
radioButtons("yaxis_scale", "Choose a Scale for the Y-Axis",
choices = list("Linear" = 1, "Log" = 2),
selected = NULL)
),
"8" = #googleVis Line Chart with 2 Y-Axes
tagList(radioButtons("isxcategorical", "Would You Like to have the X-Axis be Categorical (Such as Having the X-Axis be Material Number, Line, Batch, Or Even Columns)",
choices = list("No" = 0, "Yes" = 1),
selected = "0"),
conditionalPanel(
condition = "input.isxcategorical == '0'",
#if the user does NOT want the x-axis to be categorical
selectInput("xaxis_data", "Choose Data for the X-Axis",
choices = colnames(tapered_tari_parameter_and_yield_data),
selected = NULL)
),
#if the user does want the x-axis to be categorical
conditionalPanel(
condition = "input.isxcategorical == '1'",
#if the user does want the x-axis to be categorical
radioButtons("xcategoricalselection", "Select What Grouping You want for the X Axis",
choices = list("Material Number" = 1, "Line" = 2,
"SAP Batch Number" = 3, "The Columns" = 4),
selected = "1"),
uiOutput("xaxis_data_render")
#the xaxis data will be inputted here by inserUI in the observe
#event of xcategoricalselection
), #end conditionPanel
selectInput("yaxis_data1", "Choose Data for the First Y-Axis",
choices = colnames(tapered_tari_parameter_and_yield_data),
selected = NULL),
selectInput("yaxis_data2", "Choose Data for the Second Y-Axis",
choices = colnames(tapered_tari_parameter_and_yield_data),
selected = NULL),
radioButtons("xaxis_scale", "Choose a Scale for the X-Axis",
choices = list("Linear" = 1, "Log" = 2),
selected = NULL),
radioButtons("yaxis_scale1", "Choose a Scale for the First Y-Axis",
choices = list("Linear" = 1, "Log" = 2),
selected = NULL),
radioButtons("yaxis_scale2", "Choose a Scale for the Second Y-Axis",
choices = list("Linear" = 1, "Log" = 2),
selected = NULL)
),
"9" = #googleVis Bar Chart
tagList(selectInput("xaxis_data", "Choose Data for the X-Axis",
choices = colnames(tapered_tari_parameter_and_yield_data),
selected = NULL),
selectInput("yaxis_data", "Choose Data for the Y-Axis",
choices = colnames(tapered_tari_parameter_and_yield_data),
selected = NULL),
radioButtons("xaxis_scale", "Choose a Scale for the X-Axis",
choices = list("Linear" = 1, "Log" = 2),
selected = NULL)
),
"10" = #googleVis Column Chart
list(selectInput("xaxis_data", "Choose Data for the X-Axis",
choices = colnames(tapered_tari_parameter_and_yield_data),
selected = NULL),
selectInput("yaxis_data", "Choose Data for the Y-Axis",
choices = colnames(tapered_tari_parameter_and_yield_data),
selected = NULL),
radioButtons("yaxis_scale", "Choose a Scale for the Y-Axis",
choices = list("Linear" = 1, "Log" = 2),
selected = NULL)
),
"11" = #googleVis Area Chart
tagList(selectInput("xaxis_data", "Choose Data for the X-Axis",
choices = colnames(tapered_tari_parameter_and_yield_data),
selected = NULL),
selectInput("yaxis_data", "Choose Data for the Y-Axis",
choices = colnames(tapered_tari_parameter_and_yield_data),
selected = NULL),
radioButtons("xaxis_scale", "Choose a Scale for the X-Axis",
choices = list("Linear" = 1, "Log" = 2),
selected = NULL),
radioButtons("yaxis_scale", "Choose a Scale for the Y-Axis",
choices = list("Linear" = 1, "Log" = 2),
selected = NULL)
),
"12" = #googleVis Stepped Area Chart
list(selectInput("xaxis_data", "Choose Data for the X-Axis",
choices = colnames(tapered_tari_parameter_and_yield_data),
selected = NULL),
selectInput("yaxis_data", "Choose Data for the Y-Axis",
choices = colnames(tapered_tari_parameter_and_yield_data),
selected = NULL),
radioButtons("xaxis_scale", "Choose a Scale for the X-Axis",
choices = list("Linear" = 1, "Log" = 2),
selected = NULL),
radioButtons("yaxis_scale", "Choose a Scale for the Y-Axis",
choices = list("Linear" = 1, "Log" = 2),
selected = NULL)
),
"13" = #not curerntly available
Null,
"14" = #googleVis Bubble Chart
tagList(selectInput("idaxis_data", "Choose Grouping for the ID of the Bubble",
choices = colnames(tapered_tari_parameter_and_yield_data),
selected = NULL),
selectInput("xaxis_data", "Choose Data for the X-Axis",
choices = colnames(tapered_tari_parameter_and_yield_data),
selected = NULL),
selectInput("yaxis_data", "Choose Data for the Y-Axis",
choices = colnames(tapered_tari_parameter_and_yield_data),
selected = NULL),
radioButtons("xaxis_scale", "Choose a Scale for the X-Axis",
choices = list("Linear" = 1, "Log" = 2),
selected = NULL),
radioButtons("yaxis_scale", "Choose a Scale for the Y-Axis",
choices = list("Linear" = 1, "Log" = 2),
selected = NULL),
selectInput("coloraxis_data", "Choose Grouping for the Color",
choices = colnames(tapered_tari_parameter_and_yield_data),
selected = NULL),
selectInput("sizeaxis_data", "Choose Data for the Size of the Bubble",
choices = colnames(tapered_tari_parameter_and_yield_data),
selected = NULL)
),
"15" = #googleVis Pie Chart
tagList(selectInput("idaxis_data", "Choose Data for the ID of Each Slice",
choices = colnames(tapered_tari_parameter_and_yield_data),
selected = NULL),
selectInput("comparisonaxis_data", "Choose Data for Comparison",
choices = colnames(tapered_tari_parameter_and_yield_data),
selected = NULL)
),
"16" = #googleVis Histogram
tagList(selectInput("xaxis_data", "Choose Data for the X-Axis",
choices = colnames(tapered_tari_parameter_and_yield_data),
selected = NULL),
selectInput("yaxis_data", "Choose Data for the Y-Axis",
choices = colnames(tapered_tari_parameter_and_yield_data),
selected = NULL),
radioButtons("yaxis_scale", "Choose a Scale for the Y-Axis",
choices = list("Linear" = 1, "Log" = 2),
selected = NULL)
),
"17" = #googleVis Motion Chart
tagList(selectInput("idaxis_data", "Choose Data for ID of Each Bubble",
choices = colnames(tapered_tari_parameter_and_yield_data),
selected = NULL),
selectInput("timeaxis_data", "Choose Data for the Time Axis",
choices = colnames(tapered_tari_parameter_and_yield_data),
selected = NULL)
)
,
"18" = #googleVis Annotation Chart
tagList(#the time-axis will be chosen automatically as the start date,
selectInput("timeaxis_data", "Choose Data for the Time Axis",
choices = colnames(tapered_tari_parameter_and_yield_data),
selected = NULL),
selectInput("yaxis_data", "Choose Data for the Y-Axis",
choices = colnames(tapered_tari_parameter_and_yield_data),
selected = NULL),
radioButtons("yaxis_scale", "Choose a Scale for the Y-Axis",
choices = list("Linear" = 1, "Log" = 2),
selected = NULL)
),
"19" = #GGplot2 Scatter Plot
tagList(radioButtons("isxcategorical", "Would You Like to have the X-Axis be Categorical (Such as Having the X-Axis be Material Number, Line, Batch, Or Even Columns)",
choices = list("No" = 0, "Yes" = 1),
selected = "0"),
conditionalPanel(
condition = "input.isxcategorical == '0'",
#if the user does NOT want the x-axis to be categorical
selectInput("xaxis_data", "Choose Data for the X-Axis",
choices = colnames(tapered_tari_parameter_and_yield_data),
selected = NULL)
),
#if the user does want the x-axis to be categorical
conditionalPanel(
condition = "input.isxcategorical == '1'",
#if the user does want the x-axis to be categorical
radioButtons("xcategoricalselection", "Select What Grouping You want for the X Axis",
choices = list("Material Number" = 1, "Line" = 2,
"SAP Batch Number" = 3, "The Columns" = 4),
selected = "1"),
uiOutput("xaxis_data_render")
#the xaxis data will be inputted here by inserUI in the observe
#event of xcategoricalselection
), #end conditionPanel
selectInput("yaxis_data", "Choose Data for the Y-Axis",
choices = colnames(tapered_tari_parameter_and_yield_data),
selected = NULL),
radioButtons("xaxis_scale", "Choose a Scale for the X-Axis",
choices = list("Linear" = 1, "Log" = 2),
selected = NULL),
radioButtons("yaxis_scale", "Choose a Scale for the Y-Axis",
choices = list("Linear" = 1, "Log" = 2),
selected = NULL)
),
"20" = tagList(),
"21" = tagList(),
"22" = tagList(),
"23" = tagList(),
"24" = tagList(),
"25" = tagList(),
"26" = tagList(),
"27" = tagList(),
"28" = tagList(),
"29" = tagList(),
"30" = tagList(),
"31" = tagList(),
"32" = tagList(),
"33" = tagList(),
"34" = tagList(),
"35" = tagList(),
"36" = tagList(),
"37" = tagList(),
"38" = tagList(),
"39" = tagList(),
"40" = tagList(),
"41" = tagList(),
"42" = tagList(),
"43" = tagList(),
"44" = tagList(),
"45" = tagList(),
"46" = tagList(),
"47" = tagList(),
"48" = tagList(),
"49" = tagList()
)
graphinformation$graphaxeshtml <- axeshtml
})#end observeEvent(input$graphtype)
output$graphaxeshtmloutput <- renderUI({
#will render the information the user has to input for the axes of the specif graph
return(graphinformation$graphaxeshtml)
})
observeEvent(input$xcategoricalselection,{
#this observes what the user seleced for the categorical variable
choice_options <- switch(input$xcategoricalselection,
#based on waht the user selected for the categorical variable, this
#will change
"1" = unique(tapered_tari_parameter_and_yield_data$`Material Number`),
"2" = unique(tapered_tari_parameter_and_yield_data$Line),
"3" = unique(tapered_tari_parameter_and_yield_data$`SAP Batch Number`),
"4" = colnames(tapered_tari_parameter_and_yield_data)
)
whatisselected <- switch(input$xcategoricalselection,
#depend on the user's selection the initial choices selected changes
#all have everything selected except for the "Column" selection
"1" = choice_options,
"2" = choice_options,
"3" = choice_options,
"4" = NULL
)
output$xaxis_data_render <- renderUI(
selectizeInput(inputId = "xaxis_data",
label = "Select the Inputs for the Category (multiple are allowed)",
choices = choice_options,
selected = whatisselected,
multiple = TRUE)
)#end output$xaxis_data_render
})
}#end server
# Run the application
shinyApp(ui = ui, server = server)
